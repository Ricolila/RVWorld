//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RVServ1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="groups", Namespace="http://schemas.datacontract.org/2004/07/RVServices")]
    public partial class groups : object
    {
        
        private string basepathField;
        
        private string displayNameField;
        
        private string groupField;
        
        private string urlField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string basepath
        {
            get
            {
                return this.basepathField;
            }
            set
            {
                this.basepathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string displayName
        {
            get
            {
                return this.displayNameField;
            }
            set
            {
                this.displayNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string group
        {
            get
            {
                return this.groupField;
            }
            set
            {
                this.groupField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string url
        {
            get
            {
                return this.urlField;
            }
            set
            {
                this.urlField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RVServ1.IRVService")]
    public interface IRVService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/StartUp", ReplyAction="http://tempuri.org/IRVService/StartUpResponse")]
        void StartUp();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/StartUp", ReplyAction="http://tempuri.org/IRVService/StartUpResponse")]
        System.Threading.Tasks.Task StartUpAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/StartUpV", ReplyAction="http://tempuri.org/IRVService/StartUpVResponse")]
        void StartUpV(int version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/StartUpV", ReplyAction="http://tempuri.org/IRVService/StartUpVResponse")]
        System.Threading.Tasks.Task StartUpVAsync(int version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/StartUpV2", ReplyAction="http://tempuri.org/IRVService/StartUpV2Response")]
        void StartUpV2(int vMajor, int vMinor, int vBuild);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/StartUpV2", ReplyAction="http://tempuri.org/IRVService/StartUpV2Response")]
        System.Threading.Tasks.Task StartUpV2Async(int vMajor, int vMinor, int vBuild);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/SendUser", ReplyAction="http://tempuri.org/IRVService/SendUserResponse")]
        string SendUser(string username, string email, int version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/SendUser", ReplyAction="http://tempuri.org/IRVService/SendUserResponse")]
        System.Threading.Tasks.Task<string> SendUserAsync(string username, string email, int version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetLatestVersion", ReplyAction="http://tempuri.org/IRVService/GetLatestVersionResponse")]
        int GetLatestVersion(int VersionNow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetLatestVersion", ReplyAction="http://tempuri.org/IRVService/GetLatestVersionResponse")]
        System.Threading.Tasks.Task<int> GetLatestVersionAsync(int VersionNow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/UpdateCheck", ReplyAction="http://tempuri.org/IRVService/UpdateCheckResponse")]
        bool UpdateCheck(int vMajor, int vMinor, int vBuild);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/UpdateCheck", ReplyAction="http://tempuri.org/IRVService/UpdateCheckResponse")]
        System.Threading.Tasks.Task<bool> UpdateCheckAsync(int vMajor, int vMinor, int vBuild);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/LastestVersionCheck", ReplyAction="http://tempuri.org/IRVService/LastestVersionCheckResponse")]
        string LastestVersionCheck();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/LastestVersionCheck", ReplyAction="http://tempuri.org/IRVService/LastestVersionCheckResponse")]
        System.Threading.Tasks.Task<string> LastestVersionCheckAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetUpdateLink", ReplyAction="http://tempuri.org/IRVService/GetUpdateLinkResponse")]
        string GetUpdateLink();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetUpdateLink", ReplyAction="http://tempuri.org/IRVService/GetUpdateLinkResponse")]
        System.Threading.Tasks.Task<string> GetUpdateLinkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/SendErrorMessage", ReplyAction="http://tempuri.org/IRVService/SendErrorMessageResponse")]
        void SendErrorMessage(string username, string error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/SendErrorMessage", ReplyAction="http://tempuri.org/IRVService/SendErrorMessageResponse")]
        System.Threading.Tasks.Task SendErrorMessageAsync(string username, string error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/SendErrorMessageV", ReplyAction="http://tempuri.org/IRVService/SendErrorMessageVResponse")]
        void SendErrorMessageV(string username, int version, string error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/SendErrorMessageV", ReplyAction="http://tempuri.org/IRVService/SendErrorMessageVResponse")]
        System.Threading.Tasks.Task SendErrorMessageVAsync(string username, int version, string error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/SendErrorMessageV2", ReplyAction="http://tempuri.org/IRVService/SendErrorMessageV2Response")]
        void SendErrorMessageV2(string username, int vMajor, int vMinor, int vBuild, string error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/SendErrorMessageV2", ReplyAction="http://tempuri.org/IRVService/SendErrorMessageV2Response")]
        System.Threading.Tasks.Task SendErrorMessageV2Async(string username, int vMajor, int vMinor, int vBuild, string error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetUserPermissions", ReplyAction="http://tempuri.org/IRVService/GetUserPermissionsResponse")]
        int GetUserPermissions(string userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetUserPermissions", ReplyAction="http://tempuri.org/IRVService/GetUserPermissionsResponse")]
        System.Threading.Tasks.Task<int> GetUserPermissionsAsync(string userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/CheckDVUser", ReplyAction="http://tempuri.org/IRVService/CheckDVUserResponse")]
        string CheckDVUser(string userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/CheckDVUser", ReplyAction="http://tempuri.org/IRVService/CheckDVUserResponse")]
        System.Threading.Tasks.Task<string> CheckDVUserAsync(string userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetDVGroupInfo", ReplyAction="http://tempuri.org/IRVService/GetDVGroupInfoResponse")]
        string GetDVGroupInfo(string passcode, string group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetDVGroupInfo", ReplyAction="http://tempuri.org/IRVService/GetDVGroupInfoResponse")]
        System.Threading.Tasks.Task<string> GetDVGroupInfoAsync(string passcode, string group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetDVGroupInfoV2", ReplyAction="http://tempuri.org/IRVService/GetDVGroupInfoV2Response")]
        byte[] GetDVGroupInfoV2(string passcode, string group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetDVGroupInfoV2", ReplyAction="http://tempuri.org/IRVService/GetDVGroupInfoV2Response")]
        System.Threading.Tasks.Task<byte[]> GetDVGroupInfoV2Async(string passcode, string group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/ListOfGroupsV2", ReplyAction="http://tempuri.org/IRVService/ListOfGroupsV2Response")]
        RVServ1.groups[] ListOfGroupsV2(string passcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/ListOfGroupsV2", ReplyAction="http://tempuri.org/IRVService/ListOfGroupsV2Response")]
        System.Threading.Tasks.Task<RVServ1.groups[]> ListOfGroupsV2Async(string passcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetDVDat", ReplyAction="http://tempuri.org/IRVService/GetDVDatResponse")]
        byte[] GetDVDat(string passcode, string group, string system, string datURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetDVDat", ReplyAction="http://tempuri.org/IRVService/GetDVDatResponse")]
        System.Threading.Tasks.Task<byte[]> GetDVDatAsync(string passcode, string group, string system, string datURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetDVCue", ReplyAction="http://tempuri.org/IRVService/GetDVCueResponse")]
        byte[] GetDVCue(string passcode, string group, string system, string datURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetDVCue", ReplyAction="http://tempuri.org/IRVService/GetDVCueResponse")]
        System.Threading.Tasks.Task<byte[]> GetDVCueAsync(string passcode, string group, string system, string datURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/uploadMIAFound", ReplyAction="http://tempuri.org/IRVService/uploadMIAFoundResponse")]
        void uploadMIAFound(string passcode, System.Nullable<ulong> size, byte[] crc, byte[] sha1, byte[] sha256, byte[] md5);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/uploadMIAFound", ReplyAction="http://tempuri.org/IRVService/uploadMIAFoundResponse")]
        System.Threading.Tasks.Task uploadMIAFoundAsync(string passcode, System.Nullable<ulong> size, byte[] crc, byte[] sha1, byte[] sha256, byte[] md5);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/uploadMIA", ReplyAction="http://tempuri.org/IRVService/uploadMIAResponse")]
        void uploadMIA(string passcode, System.Nullable<ulong> size, byte[] crc, byte[] sha1, byte[] sha256, byte[] md5);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/uploadMIA", ReplyAction="http://tempuri.org/IRVService/uploadMIAResponse")]
        System.Threading.Tasks.Task uploadMIAAsync(string passcode, System.Nullable<ulong> size, byte[] crc, byte[] sha1, byte[] sha256, byte[] md5);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/uploadMIAFoundWithNames", ReplyAction="http://tempuri.org/IRVService/uploadMIAFoundWithNamesResponse")]
        void uploadMIAFoundWithNames(string passcode, System.Nullable<ulong> size, byte[] crc, byte[] sha1, byte[] sha256, byte[] md5, string datName, string setName, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/uploadMIAFoundWithNames", ReplyAction="http://tempuri.org/IRVService/uploadMIAFoundWithNamesResponse")]
        System.Threading.Tasks.Task uploadMIAFoundWithNamesAsync(string passcode, System.Nullable<ulong> size, byte[] crc, byte[] sha1, byte[] sha256, byte[] md5, string datName, string setName, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/uploadMIAWithNames", ReplyAction="http://tempuri.org/IRVService/uploadMIAWithNamesResponse")]
        void uploadMIAWithNames(string passcode, System.Nullable<ulong> size, byte[] crc, byte[] sha1, byte[] sha256, byte[] md5, string datName, string setName, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/uploadMIAWithNames", ReplyAction="http://tempuri.org/IRVService/uploadMIAWithNamesResponse")]
        System.Threading.Tasks.Task uploadMIAWithNamesAsync(string passcode, System.Nullable<ulong> size, byte[] crc, byte[] sha1, byte[] sha256, byte[] md5, string datName, string setName, string fileName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface IRVServiceChannel : RVServ1.IRVService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class RVServiceClient : System.ServiceModel.ClientBase<RVServ1.IRVService>, RVServ1.IRVService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RVServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(RVServiceClient.GetBindingForEndpoint(endpointConfiguration), RVServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RVServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RVServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RVServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RVServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RVServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public void StartUp()
        {
            base.Channel.StartUp();
        }
        
        public System.Threading.Tasks.Task StartUpAsync()
        {
            return base.Channel.StartUpAsync();
        }
        
        public void StartUpV(int version)
        {
            base.Channel.StartUpV(version);
        }
        
        public System.Threading.Tasks.Task StartUpVAsync(int version)
        {
            return base.Channel.StartUpVAsync(version);
        }
        
        public void StartUpV2(int vMajor, int vMinor, int vBuild)
        {
            base.Channel.StartUpV2(vMajor, vMinor, vBuild);
        }
        
        public System.Threading.Tasks.Task StartUpV2Async(int vMajor, int vMinor, int vBuild)
        {
            return base.Channel.StartUpV2Async(vMajor, vMinor, vBuild);
        }
        
        public string SendUser(string username, string email, int version)
        {
            return base.Channel.SendUser(username, email, version);
        }
        
        public System.Threading.Tasks.Task<string> SendUserAsync(string username, string email, int version)
        {
            return base.Channel.SendUserAsync(username, email, version);
        }
        
        public int GetLatestVersion(int VersionNow)
        {
            return base.Channel.GetLatestVersion(VersionNow);
        }
        
        public System.Threading.Tasks.Task<int> GetLatestVersionAsync(int VersionNow)
        {
            return base.Channel.GetLatestVersionAsync(VersionNow);
        }
        
        public bool UpdateCheck(int vMajor, int vMinor, int vBuild)
        {
            return base.Channel.UpdateCheck(vMajor, vMinor, vBuild);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCheckAsync(int vMajor, int vMinor, int vBuild)
        {
            return base.Channel.UpdateCheckAsync(vMajor, vMinor, vBuild);
        }
        
        public string LastestVersionCheck()
        {
            return base.Channel.LastestVersionCheck();
        }
        
        public System.Threading.Tasks.Task<string> LastestVersionCheckAsync()
        {
            return base.Channel.LastestVersionCheckAsync();
        }
        
        public string GetUpdateLink()
        {
            return base.Channel.GetUpdateLink();
        }
        
        public System.Threading.Tasks.Task<string> GetUpdateLinkAsync()
        {
            return base.Channel.GetUpdateLinkAsync();
        }
        
        public void SendErrorMessage(string username, string error)
        {
            base.Channel.SendErrorMessage(username, error);
        }
        
        public System.Threading.Tasks.Task SendErrorMessageAsync(string username, string error)
        {
            return base.Channel.SendErrorMessageAsync(username, error);
        }
        
        public void SendErrorMessageV(string username, int version, string error)
        {
            base.Channel.SendErrorMessageV(username, version, error);
        }
        
        public System.Threading.Tasks.Task SendErrorMessageVAsync(string username, int version, string error)
        {
            return base.Channel.SendErrorMessageVAsync(username, version, error);
        }
        
        public void SendErrorMessageV2(string username, int vMajor, int vMinor, int vBuild, string error)
        {
            base.Channel.SendErrorMessageV2(username, vMajor, vMinor, vBuild, error);
        }
        
        public System.Threading.Tasks.Task SendErrorMessageV2Async(string username, int vMajor, int vMinor, int vBuild, string error)
        {
            return base.Channel.SendErrorMessageV2Async(username, vMajor, vMinor, vBuild, error);
        }
        
        public int GetUserPermissions(string userkey)
        {
            return base.Channel.GetUserPermissions(userkey);
        }
        
        public System.Threading.Tasks.Task<int> GetUserPermissionsAsync(string userkey)
        {
            return base.Channel.GetUserPermissionsAsync(userkey);
        }
        
        public string CheckDVUser(string userkey)
        {
            return base.Channel.CheckDVUser(userkey);
        }
        
        public System.Threading.Tasks.Task<string> CheckDVUserAsync(string userkey)
        {
            return base.Channel.CheckDVUserAsync(userkey);
        }
        
        public string GetDVGroupInfo(string passcode, string group)
        {
            return base.Channel.GetDVGroupInfo(passcode, group);
        }
        
        public System.Threading.Tasks.Task<string> GetDVGroupInfoAsync(string passcode, string group)
        {
            return base.Channel.GetDVGroupInfoAsync(passcode, group);
        }
        
        public byte[] GetDVGroupInfoV2(string passcode, string group)
        {
            return base.Channel.GetDVGroupInfoV2(passcode, group);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetDVGroupInfoV2Async(string passcode, string group)
        {
            return base.Channel.GetDVGroupInfoV2Async(passcode, group);
        }
        
        public RVServ1.groups[] ListOfGroupsV2(string passcode)
        {
            return base.Channel.ListOfGroupsV2(passcode);
        }
        
        public System.Threading.Tasks.Task<RVServ1.groups[]> ListOfGroupsV2Async(string passcode)
        {
            return base.Channel.ListOfGroupsV2Async(passcode);
        }
        
        public byte[] GetDVDat(string passcode, string group, string system, string datURL)
        {
            return base.Channel.GetDVDat(passcode, group, system, datURL);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetDVDatAsync(string passcode, string group, string system, string datURL)
        {
            return base.Channel.GetDVDatAsync(passcode, group, system, datURL);
        }
        
        public byte[] GetDVCue(string passcode, string group, string system, string datURL)
        {
            return base.Channel.GetDVCue(passcode, group, system, datURL);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetDVCueAsync(string passcode, string group, string system, string datURL)
        {
            return base.Channel.GetDVCueAsync(passcode, group, system, datURL);
        }
        
        public void uploadMIAFound(string passcode, System.Nullable<ulong> size, byte[] crc, byte[] sha1, byte[] sha256, byte[] md5)
        {
            base.Channel.uploadMIAFound(passcode, size, crc, sha1, sha256, md5);
        }
        
        public System.Threading.Tasks.Task uploadMIAFoundAsync(string passcode, System.Nullable<ulong> size, byte[] crc, byte[] sha1, byte[] sha256, byte[] md5)
        {
            return base.Channel.uploadMIAFoundAsync(passcode, size, crc, sha1, sha256, md5);
        }
        
        public void uploadMIA(string passcode, System.Nullable<ulong> size, byte[] crc, byte[] sha1, byte[] sha256, byte[] md5)
        {
            base.Channel.uploadMIA(passcode, size, crc, sha1, sha256, md5);
        }
        
        public System.Threading.Tasks.Task uploadMIAAsync(string passcode, System.Nullable<ulong> size, byte[] crc, byte[] sha1, byte[] sha256, byte[] md5)
        {
            return base.Channel.uploadMIAAsync(passcode, size, crc, sha1, sha256, md5);
        }
        
        public void uploadMIAFoundWithNames(string passcode, System.Nullable<ulong> size, byte[] crc, byte[] sha1, byte[] sha256, byte[] md5, string datName, string setName, string fileName)
        {
            base.Channel.uploadMIAFoundWithNames(passcode, size, crc, sha1, sha256, md5, datName, setName, fileName);
        }
        
        public System.Threading.Tasks.Task uploadMIAFoundWithNamesAsync(string passcode, System.Nullable<ulong> size, byte[] crc, byte[] sha1, byte[] sha256, byte[] md5, string datName, string setName, string fileName)
        {
            return base.Channel.uploadMIAFoundWithNamesAsync(passcode, size, crc, sha1, sha256, md5, datName, setName, fileName);
        }
        
        public void uploadMIAWithNames(string passcode, System.Nullable<ulong> size, byte[] crc, byte[] sha1, byte[] sha256, byte[] md5, string datName, string setName, string fileName)
        {
            base.Channel.uploadMIAWithNames(passcode, size, crc, sha1, sha256, md5, datName, setName, fileName);
        }
        
        public System.Threading.Tasks.Task uploadMIAWithNamesAsync(string passcode, System.Nullable<ulong> size, byte[] crc, byte[] sha1, byte[] sha256, byte[] md5, string datName, string setName, string fileName)
        {
            return base.Channel.uploadMIAWithNamesAsync(passcode, size, crc, sha1, sha256, md5, datName, setName, fileName);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRVService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_IRVService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRVService))
            {
                return new System.ServiceModel.EndpointAddress("http://services.romvault.com/RVService.svc");
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_IRVService))
            {
                return new System.ServiceModel.EndpointAddress("https://services.romvault.com/RVService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IRVService,
            
            BasicHttpsBinding_IRVService,
        }
    }
}
